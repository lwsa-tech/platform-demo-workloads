# yaml-language-server: $schema=https://raw.githubusercontent.com/lwsa-tech/platform-static/main/schemas/blueprint.json

configmaps:
  - name: mapa
    data:
      nome: Giba
      empresa: Locaweb

  - name: outromapa
    data:
      foo: bar

secrets:
  - name: segredo
    namespace: utilities
    data:
      # Conteúdo do segredo deve ser criptografado via kubeseal
      chave: AgDF2Oe7Ni4wqpUMHMdnnBbfaAMDw62AoWFWAck0ychDdaFQirHfDtVqO7/n/keIChxaXAfMk8dI3yy09Fa/wNW8Rjde36Ki7UD/TiBKsHEAkTk6wwnqKdnlY67DQNcQFa+Q1LZwITkPKj5K3bEDJak3a7rXjGBTg5otzRXfQ9pnvyNjiIwvTWmkMu4G9effz0MyNFpHhrVZswu789WlNNfEHMFUC/XUigqbwZbbQhIzRer1FIcPVO4hA+M0r1QSJBDvZkudoMGUDC45jQQRnaw7st4ovW3tJLelfrVFgFufobcS+mj1hw8B6Qj8QmlaPyfaeSWgJ9iEUV+cgSeou/dwpbGJrkHg+n4shrHmxP0zO6RjaH0lalVAdzEWqWmnHHJSipJ7B2enj1JIqE3ewvAngv+YWeQLsh2UOxuje0mD4bPK3vaJg0O8B7823d1SaSzFu15zJLOPv9aZp41UdkZFrXX8wePfWeJBfUQEDn8CQdkI7m7FiqSdvIL6m2VSAlzPz5AuCzuufPqIVxCKrBPMbTUWeLLi8TrT6E7tG4yBd0DjsBwSIIwmB8DYviNuwp7ZGGgXNHVa4dT8cPXICFrJzbhu+LyUH+Zoly9/8xjGoKoY8nLDAM1+lk8VYsxJh3gC4EJ36Fq510Ch3ZCdCjnk/oJUNB4sdrV4igI5soyt53l0YmNut0dFsBvyZu3Q4OVZumrS

cronjobs:
  - name: test-cron
    image: ubuntu
    plan: pico
    schedule: "*/5 * * * * "
    command:
      - /bin/sh
      - "-c"
      - |
        export DEBIAN_FRONTEND=noninteractive
        timeout --foreground 180s \
          apt-get update \
          && apt-get install -y curl \
          || { echo "apt-get failed"; exit 1; }
        echo "Teste $a" # imprimir "Teste b"
        curl --max-time 10 http://wp.portal
    allowTo:
      services:
        - namespace: portal
          name: wp
    egress:
      enabled: true
      toFQDNs:
        - pattern: '*.ubuntu.com'
    envVarsFrom:
      dbServers:
        - name: docdb
          type: ferretdb
    envVars:
      a: b

jobs:
  - name: a-job
    image: ubuntu
    plan: pico
    envVars:
      FOO: bar
    envVarsFrom:
      secrets:
        - name: segredo
          mappings:
            VALOR: chave
      configMaps:
        - name: mapa
          mappings:
            NAME: nome
      searches:
        - name: mysearch
          type: elasticsearch
      dbServers:
        - name: docdb
          type: ferretdb
    mountVolumes:
      - name: test-vol
        path: /data
    command:
      - "/bin/sh"
    args:
      - "-c"
      - |
        echo "VALOR=$VALOR"
        echo "chave=$chave"
        echo "NAME=$NAME"
        echo "nome=$nome"
        echo "ELASTICSEARCH_HOST=$ELASTICSEARCH_HOST"
        echo "MONGODB_URI=$MONGODB_URI"
        echo "Current time:"
        date
        echo "Appending time to log..."
        date >> /data/log.txt
        echo "Contents of /data/log.txt:"
        cat /data/log.txt
      
volumes:
  - name: test-vol
    size: 10Gi

services:
  - name: python-web-app
    plan: pico
    image: forge-gitea.global.dev.lwsa-idp-testbed.ingress.sh/giba/python-web-app:1.0.0
    ingress:
      enabled: true

  - name: pg-bench
    plan: micro
    image: ubuntu
    command:
      - /bin/sh
      - -c
      - while :; do sleep 86400; done
    envVarsFrom:
      dbServers:
        - name: pg
          type: cnpg

  - name: console
    plan: micro
    image: ubuntu
    replicas: 2
    command:
      - /bin/sh
      - -c
      - while :; do sleep 86400; done
    egress:
      enabled: true
      toCIDRs:
        - range: 1.1.1.1/32
          port: 53
          protocol: UDP
      toFQDNs:
        # na ausência de port/protocol, conexões para qualquer porta e protocolo são permitidas
        - pattern: '*.ubuntu.com'
        - pattern: '*.amazonaws.com'
        - host: 'poc.object-storage.sh'
        - host: 'downloads.mongodb.com'
          port: 443
          protocol: TCP
    envVarsFrom:
      secrets:
        - name: segredo
          mappings:
            CHAVE: chave
      configMaps:
        - name: mapa
          mappings:
            NAME: nome
            COMPANY: empresa
        # na ausência de mappings, chaves do segredo são mapeadas diretamente para nomes das variáveis de ambiente
        - name: outromapa
      searches:
        - name: mysearch
          type: elasticsearch
          mappings:
            ES_HOST: ELASTICSEARCH_HOST
            ES_PORT: ELASTICSEARCH_PORT
            ES_USER: ELASTICSEARCH_USER
            ES_PASSWORD: ELASTICSEARCH_PASSWORD
            ES_URI: ELASTICSEARCH_URL
      dbServers:
        - name: docdb
          type: ferretdb

  - name: echo
    plan: pico
    # porta onde o container ouve, default 10000
    port: 3000
    # usar expose no lugar de ingress se desejar expor via IP público diretamente.
    # neste caso não suporta emissão automática de certificados
    expose:
      enabled: true
      sourceRanges:
        - "189.0.0.0/8"
        - "186.0.0.0/8"
        - "187.0.0.0/8"
        - "70.0.0.0/8"
        - "177.0.0.0/8"
    # ingress:
    #   hosts:
    #     - echo.giba.tech
    #   enabled: true
    #   sourceRanges:
    #     - "189.0.0.0/8"
    #     - "186.0.0.0/8"
    #     - "187.0.0.0/8"
    image: cilium/echoserver

  - name: pgadmin
    ingress:
      enabled: true
    image: dpage/pgadmin4:9
    plan: micro
    envVars:
      PGADMIN_DEFAULT_EMAIL: gilberto.mautner@locaweb.com.br
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_LISTEN_PORT: "10000"

dbServers:
  - name: mydb
    replicas: 1
    type: pxc
    version: "8.0"
    plan: small
    size: 200Gi
    expose:
      enabled: true
    # quando true, desliga banco, sem apagar dados. Serve para economizar recursos quando não precisa
    pause: false

  # - name: mydb-copy-2
  #   replicas: 1
  #   type: pxc
  #   version: "8.0"
  #   plan: large
  #   size: 200Gi
  #   restoreFrom:
  #     name: mydb

  # usado para teste de carga (sysbench). Escalar para 3 replicas e 2xlarge para testar.
  - name: newdb
    replicas: 1
    type: pxc
    version: "8.0"
    plan: small # large para sysbench com 30 GB dados
    size: 600Gi
    expose:
      enabled: true

  # usado para teste de carga (sysbench). Escalar para 3 replicas e 2xlarge para testar.
  - name: pg
    type: cnpg
    version: "16"
    plan: large # large para sysbench 30 GB dados
    size: 300Gi
    expose:
      enabled: true
    pause: false
    replicas: 3
  
  # - name: pg-copy
  #   type: cnpg
  #   version: "16"
  #   plan: micro
  #   size: 90Gi
  #   restoreFrom:
  #     name: pg

  - name: docdb
    type: ferretdb
    version: "17"
    plan: nano
    size: 90Gi
    replicas: 3
    expose:
      enabled: true
      sourceRanges:
        - "189.0.0.0/8"
        - "186.0.0.0/8"
        - "187.0.0.0/8"
        - "185.0.0.0/8"
        - "177.0.0.0/8"

  - name: docdb-g
    type: ferretdb
    version: "17"
    plan: nano
    size: 35Gi
    restoreFrom:
      name: docdb

searches:
  - name: mysearch
    type: elasticsearch
    version: "8.17.2"
    expose:
      enabled: true
      sourceRanges:
        - "189.0.0.0/8"
        - "186.0.0.0/8"
        - "187.0.0.0/8"
        - "201.0.0.0/8"
        - "70.0.0.0/8"
    nodes:
      master:
        replicas: 3 # default 3
        plan: medium
        size: 80Gi
      data:
        replicas: 3 # default 3
        plan: large
        size: 160Gi
    dashboard:
      enabled: true
      sourceRanges:
        - "189.0.0.0/8"
        - "186.0.0.0/8"
        - "187.0.0.0/8"
        - "201.0.0.0/8"
        - "177.0.0.0/8"
        - "70.0.0.0/8"
      replicas: 1 # default 1
      plan: small