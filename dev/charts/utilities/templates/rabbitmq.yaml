apiVersion: rabbitmq.com/v1beta1
kind: RabbitmqCluster
metadata:
  name: production-ready
spec:
  # service:
  #   type: LoadBalancer
  #   annotations:
  #     service.beta.kubernetes.io/aws-load-balancer-scheme: internet-facing
  replicas: 3
  resources:
    requests:
      cpu: 75m
      memory: 1Gi
    limits:
      cpu: "1"
      memory: 1Gi
  rabbitmq:
    additionalConfig: |
      cluster_partition_handling = pause_minority
      disk_free_limit.relative = 1.0
      collect_statistics_interval = 10000
  persistence:
    storageClassName: {{ $.Values.global.dbStorageClassName }}
    storage: "50Gi"
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchExpressions:
            - key: app.kubernetes.io/name
              operator: In
              values:
              - production-ready
        topologyKey: kubernetes.io/hostname
  # override:
  #   service:
  #     spec:
  #       loadBalancerSourceRanges:
  #         - "189.0.0.0/8"
  #         - "186.0.0.0/8"
  #         - "187.0.0.0/8"
  #         - "201.0.0.0/8"
  #         - "70.0.0.0/8"
---
# Ver https://github.com/rabbitmq/cluster-operator/tree/main/docs/examples/network-policies
# Obs. mostrou-se necess√°rio acesso apiserver para clusters com mais de 1 replica
apiVersion: "cilium.io/v2"
kind: CiliumNetworkPolicy
metadata:
  name: allow-operator-traffic
spec:
  endpointSelector:
    matchLabels:
      app.kubernetes.io/component: rabbitmq
      app.kubernetes.io/name: production-ready
  ingress:
    - fromEndpoints:
        - matchLabels:
            app.kubernetes.io/component: rabbitmq-operator
            io.kubernetes.pod.namespace: rabbitmq-system
      toPorts:
        - ports:
            - port: "15672" # HTTP API
              protocol: TCP
            - port: "15671" # HTTP API + TLS
              protocol: TCP
    # para keda scaled objects poderem medir tamanho de filas
    - fromEndpoints:
        - matchLabels:
            app.kubernetes.io/name: keda-operator
            io.kubernetes.pod.namespace: keda
      toPorts:
        - ports:
            - port: "5672"
              protocol: TCP
  egress:
    - toEntities:
        - kube-apiserver
